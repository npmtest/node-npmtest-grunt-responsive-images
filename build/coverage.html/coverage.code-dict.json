{"/home/travis/build/npmtest/node-npmtest-grunt-responsive-images/test.js":"/* istanbul instrument in package npmtest_grunt_responsive_images */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-responsive-images/lib.npmtest_grunt_responsive_images.js":"/* istanbul instrument in package npmtest_grunt_responsive_images */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_responsive_images = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_responsive_images = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-responsive-images/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-responsive-images && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_responsive_images */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_responsive_images\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_responsive_images.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_responsive_images.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_responsive_images.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_responsive_images.__dirname + '/lib.npmtest_grunt_responsive_images.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-responsive-images/node_modules/grunt-responsive-images/Gruntfile.js":"/*\n * grunt-responsive-images\n * https://github.com/andismith/grunt-responsive-images\n *\n * Copyright (c) 2013 andismith\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'tasks/*.js',\n        '<%= nodeunit.tests %>'\n      ],\n      options: {\n        jshintrc: '.jshintrc'\n      }\n    },\n\n    // Before generating any new files, remove any previously-created files.\n    clean: {\n      tests: ['tmp', '!tmp/new_files_only/magikarp-200.png', '!tmp/new_files_only/magikarp-300.png']\n    },\n\n    // Configuration to be run (and then tested).\n    responsive_images: {\n      options: {\n        engine: 'im'\n      },\n      default_options: {\n        options: {\n        },\n        files: {\n          'tmp/default_options/minions.jpg': 'test/assets/default_options/minions.jpg'\n        }\n      },\n      no_files: {\n        options: {\n          sizes: [{\n            width: 320\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['no_files/**/*.{jpg,gif,png}'],\n          cwd: 'test/assets/',\n          dest: 'tmp/'\n        }]\n      },\n      file_wildcard_options: {\n        options: {\n          sizes: [{\n            aspectRatio: false,\n            height: 240,\n            name: 'small',\n            width: 320\n          },{\n            aspectRatio: false,\n            height: 480,\n            name: 'medium',\n            width: 640\n          },{\n            aspectRatio: false,\n            height: 768,\n            name: 'large',\n            width: 1024\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['file_wildcard_options/**.{jpg,gif,png}'],\n          cwd: 'test/assets/',\n          dest: 'tmp/'\n        }]\n      },\n      custom_options: {\n        options: {\n          sizes: [{\n            width: 110,\n            name: \"small\",\n            quality: 40\n          },{\n            width: 220,\n            quality: 100\n          },{\n            width: 330,\n            name: \"large\",\n            quality: 80\n          },{\n            width: 660,\n            name: \"large\",\n            suffix: \"_x2\",  // retina gfx\n            quality: 50\n          },{\n            createNoScaledImage: true,\n            width: 1660,\n            name: \"largest\",\n            quality: 50\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['custom_options/**.{jpg,gif,png}'],\n          cwd: 'test/assets/',\n          dest: 'tmp/'\n        }]\n      },\n      pixel_sizes: {\n        options: {\n          sizes: [{\n              aspectRatio: false,\n              width: '10px'\n            },{\n              aspectRatio: false,\n              height: '50px',\n              width: '50px'\n            },{\n              aspectRatio: false,\n              height: '500px',\n              width: '200px'\n            }]\n        },\n        files: [{\n          expand: true,\n          src: ['pixel_sizes/**/*.{jpg,gif,png}'],\n          cwd: 'test/assets/',\n          dest: 'tmp/'\n        }]\n      },\n      pixel_sizes_custom_unit: {\n        options: {\n          units: {\n            pixel: 'abc123'\n          },\n          sizes: [{\n            aspectRatio: false,\n            width: '20px',\n          },{\n            aspectRatio: false,\n            height: '50px',\n            width: '80px',\n          },{\n            aspectRatio: false,\n            height: '500px',\n            width: '500px'\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['pixel_sizes_custom_unit/**/*.{jpg,gif,png}'],\n          cwd: 'test/assets/',\n          dest: 'tmp/'\n        }]\n      },\n      percentage_sizes: {\n        options: {\n          sizes: [{\n            width: '10%',\n          },{\n            height: '50%',\n            width: '50%',\n          },{\n            height: '80%',\n            width: '200%'\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['percentage_sizes/**/*.{jpg,gif,png}'],\n          cwd: 'test/assets/',\n          dest: 'tmp/'\n        }]\n      },\n      percentage_sizes_custom_unit: {\n        options: {\n          units: {\n            percentage: 'abc123'\n          },\n          sizes: [{\n            width: '10%',\n          },{\n            height: '50%',\n            width: '50%',\n          },{\n            height: '80%',\n            width: '200%'\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['percentage_sizes_custom_unit/**/*.{jpg,gif,png}'],\n          cwd: 'test/assets/',\n          dest: 'tmp/'\n        }]\n      },\n      custom_multiply_unit: {\n        options: {\n          units: {\n            multiply: 'abc123'\n          },\n          sizes: [{\n            width: '10%',\n          },{\n            height: '50%',\n            width: '50%',\n          },{\n            height: '450px',\n            width: '800px'\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['custom_multiply_unit/**/*.{jpg,gif,png}'],\n          cwd: 'test/assets/',\n          dest: 'tmp/'\n        }]\n      },\n      custom_dest_width: {\n        options: {\n          sizes: [{\n            aspectRatio: false,\n            upscale: true,\n            width: 320\n          },{\n            aspectRatio: false,\n            upscale: true,\n            width: 640\n          },{\n            aspectRatio: false,\n            upscale: true,\n            width: 1024\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['**/*.{jpg,gif,png}'],\n          cwd: 'test/assets/custom_dest_width/',\n          custom_dest: 'tmp/custom_dest_width/{%= width %}/'\n        }]\n      },\n      custom_dest_name: {\n        options: {\n          sizes: [{\n            width: 100,\n            name: \"leo\"\n          },{\n            width: 200,\n            name: \"donnie\"\n          },{\n            width: 400,\n            name: \"raph\"\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['**/*.{jpg,gif,png}'],\n          cwd: 'test/assets/custom_dest_name/',\n          custom_dest: 'tmp/custom_dest_name/{%= name %}/'\n        }]\n      },\n      custom_dest_path: {\n        options: {\n          sizes: [{\n            width: 320\n          },{\n            width: 640\n          },{\n            width: 1024\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['**/*.{jpg,gif,png}'],\n          cwd: 'test/assets/custom_dest_path/',\n          custom_dest: 'tmp/custom_dest_path/{%= width %}/{%= path %}'\n        }]\n      },\n      rename: {\n        options: {\n          sizes: [{\n            width: \"100%\",\n            name: \"unchanged\",\n            rename: false\n          },{\n            width: \"50%\",\n            name: \"half\"\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['rename/**.{jpg,gif,png}'],\n          cwd: 'test/assets/',\n          dest: 'tmp/'\n        }]\n      },\n      filters: {\n        options: {\n          sizes: [{\n            filter: 'Point',\n            upscale: true,\n            width: 320\n          },{\n            filter: 'Point',\n            upscale: true,\n            width: 640\n          },{\n            filter: 'Point',\n            upscale: true,\n            width: 1024\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['filters/**/*.{jpg,gif,png}'],\n          cwd: 'test/assets/',\n          dest: 'tmp/'\n        }]\n      },\n      global_quality: {\n        options: {\n          tryAnimated: true,\n          quality: 80,\n          sizes: [{\n            width: 320\n          },{\n            width: 640\n          },{\n            width: 1024\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['global_quality/**/*.{jpg,gif,png}'],\n          cwd: 'test/assets/',\n          dest: 'tmp/'\n        }]\n      },\n      animated: {\n        options: {\n          tryAnimated: true,\n          quality: 80,\n          sizes: [{\n            width: 320\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['animated/**/*.gif'],\n          cwd: 'test/assets/',\n          dest: 'tmp/'\n        }]\n      },\n      new_files_only_prep: {\n        options: {\n          sizes: [{\n              aspectRatio: false,\n              width: '200px'\n            },{\n              aspectRatio: false,\n              width: '300px'\n            }]\n        },\n        files: [{\n          expand: true,\n          src: ['new_files_only/gummi-bears.jpg'],\n          cwd: 'test/assets/',\n          dest: 'tmp/'\n        }]\n      },\n      new_files_only: {\n        options: {\n          newFilesOnly: true,\n          sizes: [{\n              aspectRatio: false,\n              width: '100px'\n            },{\n              aspectRatio: false,\n              width: '200px'\n            },{\n              aspectRatio: false,\n              width: '300px'\n            }]\n        },\n        files: [{\n          expand: true,\n          src: ['new_files_only/**/*.{jpg,gif,png}'],\n          cwd: 'test/assets/',\n          dest: 'tmp/'\n        }]\n      }\n    },\n\n    // Unit tests.\n    nodeunit: {\n      tests: ['test/**/*_test.js']\n    }\n\n  });\n\n  // Actually load this plugin's task(s).\n  grunt.loadTasks('tasks');\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n  // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\n  // plugin's task(s), then test the result.\n  grunt.registerTask('test', ['clean', 'responsive_images', 'nodeunit']);\n\n  // By default, lint and run all tests.\n  grunt.registerTask('default', ['jshint', 'test']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-responsive-images/node_modules/grunt-responsive-images/tasks/responsive_images.js":"/**\n * grunt-responsive-images\n * https://github.com/andismith/grunt-responsive-images\n *\n * Copyright (c) 2014 andismith\n * Licensed under the MIT license.\n *\n * Create images at different sizes for responsive websites.\n *\n * @author Andi Smith (http://twitter.com/andismith)\n * @version 0.1.0\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  var _     = require('lodash');\n  var async = require('async');\n  var gm    = require('gm');\n  var path  = require('path');\n\n  var DEFAULT_OPTIONS = {\n    aspectRatio: true,          // maintain the aspect ratio of the image (when width and height are supplied)\n    createNoScaledImage: false, // whether to create files if upscale is set to false and large sizes are specified\n    density: 72,                // the output resolution (dpi) of the image\n    engine: 'gm',               // gm or im\n    concurrency: 1,             // Simultaneous gm processes to invoke.  CPU Cores - 1 is a reasonable choice.\n    gravity: 'Center',          // gravity for cropped images: NorthWest, North, NorthEast, West, Center, East, SouthWest, South, or SouthEast\n    newFilesOnly: true,         // NEW VALUE - whether to only run for new files/sizes only\n    quality: 100,               // value between 1 and 100\n    rename: true,               // whether file should keep its name\n    separator: '-',             // separator between name and filesize\n    tryAnimated: false,         // DEFAULT CHANGED - whether to try to resize animated files\n    upscale: false,             // whether to upscale the image\n    sample: false,\n    customIn: null,             // array of graphics engine arguments\n    customOut: null,            // array of graphics engine arguments\n    sharpen: null,\n    sizes: [{\n      name: 'small',\n      width: 320\n    },{\n      name: 'medium',\n      width: 640\n    },{\n      name: 'large',\n      width: 1024\n    }]\n  };\n\n  var DEFAULT_UNIT_OPTIONS = {\n    percentage: 'pc',\n    pixel: '',\n    multiply: 'x'\n  };\n\n  // details about the GFX rendering engines being used\n  var GFX_ENGINES = {\n    im: {\n      name: 'ImageMagick',\n      brewurl: 'imagemagick',\n      url: 'http://www.imagemagick.org/script/binary-releases.php',\n      alternative: {\n        code: 'gm',\n        name: 'GraphicsMagick'\n      }\n    },\n    gm: {\n      name: 'GraphicsMagick',\n      brewurl: 'graphicsmagick',\n      url: 'http://www.graphicsmagick.org/download.html',\n      alternative: {\n        code: 'im',\n        name: 'ImageMagick'\n      }\n    }\n  };\n\n  var cache = {},\n    gfxEngine = {};\n\n  /**\n   * Set the engine to ImageMagick or GraphicsMagick\n   *\n   * @private\n   * @param  {string}          engine     im for ImageMagick, gm for GraphicsMagick\n   */\n  var getEngine = function(engine) {\n    if (typeof GFX_ENGINES[engine] === 'undefined') {\n      return grunt.fail.warn('Invalid render engine specified');\n    }\n    grunt.verbose.ok('Using render engine: ' + GFX_ENGINES[engine].name);\n\n    if (engine === 'im') {\n      return gm.subClass({ imageMagick: (engine === 'im') });\n    }\n\n    return gm;\n  };\n\n  /**\n   * Checks for a valid array, and that there are items in the array.\n   *\n   * @private\n   * @param   {object}          obj       The object to check\n   * @return  {boolean}         Whether it is a valid array with items.\n   */\n  var isValidArray = function(obj) {\n   return (_.isArray(obj) && obj.length > 0);\n  };\n\n  /**\n   * Checks for a valid width and/or height.\n   * We do not need both - one is sufficient, but if a value is supplied it must be a valid value.\n   * If width is a percentage, height must also be a percentage - they cannot be mixed.\n   *\n   * @private\n   * @param   {number/string}   width     The width, either as a number or a percentage (or as undefined)\n   * @param   {number/string}   height    The height, either as a number or a percentage (or as undefined)\n   * @return  {boolean}         Whether the size is valid.\n   */\n  var isValidSize = function(width, height) {\n    // Valid values = 1, '1px', '1', '1%', '1.1%', '11.11111%', '111111%'\n    // Invalid values = -1, '1.1.1%', '1a', 'a1'\n    var pcRegExp = /^[0-9]*\\.?[0-9]+%?$/,\n      pxRegExp = /^[0-9]+(?:px)?$/,\n      isValid = false;\n\n    if ((width || height)) {\n      // check if we have a valid percentage value\n      if (!!(width || 0).toString().match(pcRegExp) &&\n        !!(height || 0).toString().match(pcRegExp)) {\n        isValid = true;\n      // check if we have a valid pixel value\n      } else if (!!(width || 0).toString().match(pxRegExp) &&\n        !!(height || 0).toString().match(pxRegExp)) {\n        isValid = true;\n      } else {\n        grunt.log.error('Width/height value is not valid. Percentages and pixels cannot be mixed.');\n      }\n\n    } else {\n      grunt.log.error('Either width and/or height must be specified.');\n    }\n\n    return isValid;\n  };\n\n  /**\n   * Checks value if is a valid quality between 1 and 100.\n   *\n   * @private\n   * @param   {number}    quality The quality.\n   * @return  {boolean}   Whether the quality is valid.\n   */\n  var isValidQuality = function(quality) {\n    return (quality > 1) && (quality <= 100);\n  };\n\n  /**\n   * Create a name to suffix to our file.\n   *\n   * @private\n   * @param   {object}          properties Contains properties for name, width, height (where applicable)\n   * @return  {string}          A new name\n   */\n  var getName = function(properties, options) {\n    var widthUnit = '',\n      heightUnit = '';\n\n    // name takes precedence\n    if (properties.name) {\n      return properties.name;\n    } else {\n      // figure out the units for width and height (they can be different)\n      widthUnit = ((properties.width || 0).toString().indexOf('%') > 0) ? options.units.percentage : options.units.pixel;\n      heightUnit = ((properties.height || 0 ).toString().indexOf('%') > 0) ? options.units.percentage : options.units.pixel;\n\n      if (properties.width && properties.height) {\n        return parseFloat(properties.width) + widthUnit + options.units.multiply + parseFloat(properties.height) + heightUnit;\n      } else {\n        return (properties.width) ? parseFloat(properties.width) + widthUnit : parseFloat(properties.height) + heightUnit;\n      }\n    }\n  };\n\n\n  /**\n   * Add a prefix and/or a suffix to a value.\n   *\n   * @private\n   * @param   {string}          value         The value to prefix/suffix\n   * @param   {string}          prefix        The required prefix (optional)\n   * @param   {string}          suffix        The required suffix (optional)\n   */\n  var addPrefixSuffix = function(value, prefix, suffix, rename) {\n    if (rename) {\n      return (prefix || '') + value + (suffix || '');\n    } else {\n      return (suffix || '');\n    }\n  };\n\n  /**\n   * Check the target has been set up properly in Grunt.\n   * Graceful handling of https://github.com/andismith/grunt-responsive-images/issues/2\n   *\n   * @private\n   * @param   {object}          files         The files object\n   */\n  var checkForValidTarget = function(files) {\n    var test;\n\n    try {\n      test = files.src;\n    } catch (exception) {\n      grunt.fail.fatal('Unable to read configuration.\\n' +\n      'Have you specified a target? See: http://gruntjs.com/configuring-tasks');\n    }\n  };\n\n  /**\n   * Check that there is only one source file in compact/files object format.\n   *\n   * @private\n   * @param   {object}          files         The files object\n   */\n  var checkForSingleSource = function(files) {\n    // more than 1 source.\n    if (files.src.length > 1) {\n      return grunt.fail.warn('Unable to resize more than one image in compact or files object format.\\n'+\n      'For multiple files please use the files array format.\\nSee http://gruntjs.com/configuring-tasks');\n    }\n  };\n\n  /**\n   * Check if a directory exists, and create it if it doesn't.\n   *\n   * @private\n   * @param   {string}          dirPath   The path we want to check\n   */\n  var checkDirectoryExists = function(dirPath) {\n    if (!grunt.file.isDir(dirPath)) {\n      grunt.file.mkdir(dirPath);\n    }\n  };\n\n  /**\n   * Removes characters from the values of the object keys specified\n   *\n   * @private\n   * @param   {object}          obj       The object to inspect.\n   * @param   {array}           keys      The keys to check the values of.\n   * @param   {string}          remove    The string to remove.\n   */\n  var removeCharsFromObjectValue = function(obj, keys, remove) {\n    var i = 0,\n      l = keys.length;\n    for (i = 0; i < l; i++) {\n      if (obj[keys[i]] && obj[keys[i]].toString().indexOf(remove) > -1) {\n      obj[keys[i]] = obj[keys[i]].toString().replace(remove, '');\n      }\n    }\n    return obj;\n  };\n\n  /**\n   * Handle showing errors to the user.\n   *\n   * @private\n   * @param   {string}          error     The error message.\n   * @param   {string}          engine    The graphics engine being used.\n   */\n  var handleImageErrors = function(error, engine) {\n\n    if (error.message.indexOf('ENOENT') > -1) {\n      grunt.log.error(error.message);\n\n      grunt.fail.warn('\\nPlease ensure ' + GFX_ENGINES[engine].name + ' is installed correctly.\\n' +\n      '`brew install ' + GFX_ENGINES[engine].brewurl + '` or see ' + GFX_ENGINES[engine].url + ' for more details.\\n' +\n      'Alternatively, set options.engine to \\'' + GFX_ENGINES[engine].alternative.code + '\\' to use ' + GFX_ENGINES[engine].alternative.name + '.\\n');\n    } else {\n      grunt.fail.warn(error.message);\n    }\n  };\n\n  var isAnimatedGif = function(data, dstPath, tryAnimated) {\n    // GIF87 cannot be animated.\n    // data.Delay and Scene can identify an animation GIF\n    if (!tryAnimated && data && data.format && data.format.toUpperCase() === 'GIF' && data.Delay && data.Scene) {\n      grunt.verbose.warn(dstPath + ' is animated - skipping');\n      return true;\n    }\n  };\n\n  /**\n   * Outputs the result of the tally.\n   *\n   * @private\n   * @param   {number}          count     The file count.\n   * @param   {string}          name      Name of the image.\n   */\n  var outputResult = function(count, name) {\n    if (count) {\n      grunt.log.writeln('Resized ' + count.toString().cyan + ' ' +\n      grunt.util.pluralize(count, 'file/files') + ' for ' + name);\n    }\n  };\n\n  /**\n   * Check whether a new version exists\n   *\n   * @private\n   * @param   {string}          srcPath     File source path\n   * @param   {string}          dstPath     File destination path\n   */\n  var isFileNewVersion = function(srcPath, dstPath) {\n    return (!grunt.file.exists(dstPath));\n  };\n\n  var processImage = function(srcPath, dstPath, sizeOptions, tally, callback) {\n    var image = gfxEngine(srcPath);\n\n    image.identify(\"%m:%T:%s\\n\", function(err, dataRaw) {\n      if(err){\n        handleImageErrors(err, sizeOptions.engine);\n      }\n\n      var lastLineData = dataRaw.trim().split(\"\\n\").slice(-1)[0].split(\":\");\n      if (lastLineData.length !== 3) {\n        handleImageErrors(new Error(\"Could not parse identify output: \" + dataRaw), sizeOptions.engine);\n      }\n\n      var data = {\n        format: lastLineData[0],\n        Delay: parseInt(lastLineData[1], 10),\n        Scene: parseInt(lastLineData[2], 10)\n      };\n\n      if (!isAnimatedGif(data, dstPath, sizeOptions.tryAnimated)) {\n      image.size(function(error, size) {\n        var sizeTo = {\n          width: sizeOptions.width,\n          height: sizeOptions.height\n        };\n        var sizingMethod = '';\n        var mode = 'resize';\n\n        if (error) {\n         handleImageErrors(error, sizeOptions.engine);\n        } else {\n\n        if (!sizeOptions.aspectRatio && sizeOptions.width && sizeOptions.height) {\n          // crop image\n          sizingMethod = '^';\n          mode = 'crop';\n        }\n\n        if (sizeOptions.width > size.width || sizeOptions.height > size.height) {\n          if (sizeOptions.upscale) {\n            // upscale\n            if (sizeOptions.aspectRatio) {\n              sizingMethod = '^';\n            } else {\n              sizingMethod = '!';\n            }\n          } else if (sizeOptions.aspectRatio) {\n            sizeTo.width = size.width;\n            sizeTo.height = size.height;\n          }\n\n          if (sizeOptions.createNoScaledImage) {\n            grunt.verbose.ok('Upscaled image ' + dstPath + ' will not be created');\n            return callback();\n          }\n        }\n\n        // Add custom Input arguments to the graphics engine command before filter or quality options.\n        // customIn: ['-interlace', 'line']\n        // yields the command\n        // gm \"convert\" \"-interlace\" \"line\" \"-quality\" \"60\" \"img/inputfile.jpg\" ...\n        if (isValidArray(sizeOptions.customIn)) {\n          sizeOptions.customIn.forEach(function(val){ image.in(val); });\n        } else if (sizeOptions.customIn) {\n          image.in(sizeOptions.customIn);\n        }\n\n        if (sizeOptions.filter) {\n          image.filter(sizeOptions.filter);\n        }\n\n        if (sizeOptions.sample) {\n          image\n            .sample(sizeTo.width, sizeTo.height, sizingMethod)\n            .quality(sizeOptions.quality);\n        } else {\n          image\n            .resize(sizeTo.width, sizeTo.height, sizingMethod)\n            .quality(sizeOptions.quality);\n        }\n\n        if (mode === 'crop') {\n          image\n          .gravity(sizeOptions.gravity)\n          .crop(sizeOptions.width, sizeOptions.height, 0, 0);\n        }\n\n        if (sizeOptions.sharpen) {\n          image\n            .sharpen(sizeOptions.sharpen.radius, sizeOptions.sharpen.sigma);\n        }\n\n        if (sizeOptions.density) {\n          image.density(sizeOptions.density, sizeOptions.density);\n        }\n\n        // Add custom Output arguments to the graphics engine command after all other options, but before the output filename.\n        // customOut: [\n        //      '-gravity', 'SouthEast', '-font', \"Arial\", '-pointsize', '12',\n        //      '-fill', '#445', '-draw', 'text 5,2 \\'\\u00A9 copyright\\'',\n        //      '-fill', '#ffe', '-draw', 'text 6,3 \\'\\u00A9 copyright\\''\n        // ]\n        // yields the command\n        // gm \"convert\" ... \"img/inputfile.jpg\" \"-resize\" \"1280x\" \"-gravity\" \"SouthEast\" \"-font\" \"Arial\" \"-pointsize\" \"12\" \"-fill\" \"#445\" \"-draw\" \"text 5,2 '© copyright'\" \"-fill\" \"#ffe\" \"-draw\" \"text 6,3 '© copyright'\" \"tmp/img/outputfile.jpg\"\n        if (isValidArray(sizeOptions.customOut)) {\n          sizeOptions.customOut.forEach(function(val){ image.out(val); });\n        } else if (sizeOptions.customOut) {\n          image.out(sizeOptions.customOut);\n        }\n\n        image.write(dstPath, function (error) {\n          if (error) {\n            handleImageErrors(error, sizeOptions.engine);\n          } else {\n            grunt.verbose.ok('Responsive Image: ' + srcPath + ' now '+ dstPath);\n            tally[sizeOptions.id]++;\n          }\n          return callback();\n        });\n        }\n      });\n      } else {\n      return callback();\n      }\n    });\n  };\n\n\n  /**\n   * Gets the destination path\n   *\n   * @private\n   * @param   {string}          srcPath   The source path\n   * @param   {string}          filename  Image Filename\n   * @param   {object}          sizeOptions\n   * @param   {string}          customDest\n   * @param   {string}          origCwd\n   * @return                    The complete path and filename\n   */\n  var getDestination = function(srcPath, dstPath, sizeOptions, customDest, origCwd) {\n    var baseName = '',\n      dirName = '',\n      extName = '';\n\n    extName = path.extname(dstPath);\n    baseName = path.basename(dstPath, extName); // filename without extension\n\n    if (customDest) {\n\n      sizeOptions.path = srcPath.replace(new RegExp(origCwd), \"\").replace(new RegExp(path.basename(srcPath)+\"$\"), \"\");\n\n      grunt.template.addDelimiters('size', '{%', '%}');\n\n      dirName = grunt.template.process(customDest, {\n        delimiters: 'size',\n        data: sizeOptions\n      });\n\n      checkDirectoryExists(path.join(dirName));\n      return path.join(dirName, baseName + extName);\n    } else {\n      dirName = path.dirname(dstPath);\n      checkDirectoryExists(path.join(dirName));\n      return path.join(dirName, baseName + sizeOptions.outputName + extName);\n    }\n  };\n\n  // let's get this party started\n\n  grunt.registerMultiTask('responsive_images', 'Create images at different sizes for responsive websites.', function() {\n\n    var done = this.async();\n    var i = 0;\n    var series = [];\n    var options = this.options(DEFAULT_OPTIONS); // Merge task-specific and/or target-specific options with these defaults.\n    var tally = {};\n    var task = this;\n\n    if (!isValidArray(options.sizes)) {\n      return grunt.fail.fatal('No sizes have been defined.');\n    }\n\n    gfxEngine = getEngine(options.engine);\n\n    options.units = _.extend(_.clone(DEFAULT_UNIT_OPTIONS), options.units);\n\n    options.sizes.forEach(function(s) {\n      var resizeparallel = [];\n      var sizeOptions = _.extend({}, options, s);\n\n      if (!isValidSize(sizeOptions.width, sizeOptions.height)) {\n        // allow task to be by-passed if no images\n        return grunt.log.warn('Size is invalid (' + sizeOptions.width + ', ' + sizeOptions.height + ')');\n      }\n\n      if (!isValidQuality(sizeOptions.quality)) {\n        return grunt.log.warn('Quality configuration has changed to values between 1 - 100. Please update your configuration');\n      }\n\n      sizeOptions.id = i;\n      i++;\n\n      tally[sizeOptions.id] = 0;\n\n      if (task.files.length === 0) {\n        return grunt.log.warn('Unable to compile; no valid source files were found.');\n      } else {\n\n        // Iterate over all specified file groups.\n        task.files.forEach(function(f) {\n\n          var srcPath = '',\n            dstPath = '';\n\n          checkForValidTarget(f);\n          checkForSingleSource(f);\n\n          // create a name for our image based on name, width, height\n          sizeOptions.name = getName({ name: sizeOptions.name, width: sizeOptions.width, height: sizeOptions.height }, options);\n\n          // create an output name with prefix, suffix\n          sizeOptions.outputName = addPrefixSuffix(sizeOptions.name, sizeOptions.separator, sizeOptions.suffix, sizeOptions.rename);\n\n          srcPath = f.src[0];\n          dstPath = getDestination(srcPath, f.dest, sizeOptions, f.custom_dest, f.orig.cwd);\n\n          // remove pixels from the value so the gfx process doesn't complain\n          sizeOptions = removeCharsFromObjectValue(sizeOptions, ['width', 'height'], 'px');\n\n          // resize images in parallel if options.concurrency > 1\n          resizeparallel.push(function(callback) {\n\n            if (sizeOptions.newFilesOnly) {\n              if (isFileNewVersion(srcPath, dstPath)) {\n                return processImage(srcPath, dstPath, sizeOptions, tally, callback);\n              } else {\n                grunt.verbose.ok('File already exists: ' + dstPath);\n                // defer the callback\n                setImmediate(callback);\n              }\n            } else {\n              return processImage(srcPath, dstPath, sizeOptions, tally, callback);\n            }\n\n          });\n        });\n\n        // resize images in parallel if options.concurrency > 1\n        series.push(function(callback) {\n          async.parallelLimit(resizeparallel, options.concurrency, callback);\n        });\n\n        series.push(function(callback) {\n          outputResult(tally[sizeOptions.id], sizeOptions.name);\n          return callback();\n        });\n      }\n    });\n\n    async.series(series, done);\n  });\n\n};\n"}